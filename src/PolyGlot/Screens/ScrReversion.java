/*
 * Copyright (c) 2018, DThompson
 * All rights reserved.
 *
 * Licensed under: Creative Commons Attribution-NonCommercial 4.0 International Public License
 *  See LICENSE.TXT included with this code to read the full license agreement.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package PolyGlot.Screens;

import PolyGlot.CustomControls.InfoBox;
import PolyGlot.CustomControls.PButton;
import PolyGlot.CustomControls.PDialog;
import PolyGlot.DictCore;
import PolyGlot.IOHandler;
import PolyGlot.Nodes.ReversionNode;
import javax.swing.DefaultListModel;

/**
 *
 * @author DThompson
 */
public final class ScrReversion extends PDialog {

    public ScrReversion(DictCore _core) {
        core = _core;
        initComponents();
        
        DefaultListModel<ReversionNode> revModel = new DefaultListModel<>();
        
        lstReversions.setModel(revModel);
        this.setModal(true);
        
        core.getReversionManager().getReversionList().forEach((node) -> {
            revModel.addElement(node);
        });
        
        if (core.getRootWindow() != null){
            this.setLocation(core.getRootWindow().getLocation());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new PButton(core);
        jScrollPane1 = new javax.swing.JScrollPane();
        lstReversions = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revert Language File");

        jButton1.setText("Revert To");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lstReversions.setModel(new javax.swing.AbstractListModel<PolyGlot.Nodes.ReversionNode>() {
            PolyGlot.Nodes.ReversionNode[] nodes = new PolyGlot.Nodes.ReversionNode[0];
            public int getSize() { return nodes.length; }
            public PolyGlot.Nodes.ReversionNode getElementAt(int i) { return nodes[i]; }
        });
        lstReversions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstReversions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReversionNode revertion = (ReversionNode)lstReversions.getSelectedValue();
        
        if (revertion != null && InfoBox.actionConfirmation("Confirm Revert", "This action will revert to the state of " 
                + "this language " + revertion.toString() + ".\n Are you sure you would like to continue?", this)) {
            try {
                core.revertToState(revertion.value, core.getCurFileName());
                InfoBox.info("Successful Reversion", "Reversion Successful!", this);
                this.dispose();
            } catch (Exception e) {
                IOHandler.writeErrorLog(e);
                InfoBox.error("Unable to Revert", "Unable to revert to prior version: " 
                        + e.getLocalizedMessage(), this);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void updateAllValues(DictCore _core) {
        // do nothing
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<PolyGlot.Nodes.ReversionNode> lstReversions;
    // End of variables declaration//GEN-END:variables
}
